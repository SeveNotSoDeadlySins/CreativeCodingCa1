https://www.canva.com/design/play?category=tADWPe0sPmk&template=EAFEyCaPTyE

https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById

https://www.linkedin.com/advice/3/what-steps-using-javascript-html-form-manipulation-jzhne#:~:text=To%20access%20the%20elements%20of,element%20with%20the%20specified%20index.

https://www.youtube.com/watch?v=ikR9DsGMUMc


for (let i = 0; i < this.data.length; i++) {
    let jump = (this.barWidth + this.gap) * i;
    let barHeight = -this.data[i][this.yValue] * this.scaler; // Negative to grow upwards
    let radius = 10; // Curve radius

    fill(this.barColour);
    noStroke();

    // Draw a custom bar with a rounded top
    beginShape();
    vertex(jump, 0);  // Bottom-left
    vertex(jump + this.barWidth, 0); // Bottom-right
    vertex(jump + this.barWidth, barHeight + radius); // Right straight part
    quadraticVertex(jump + this.barWidth / 2, barHeight, jump, barHeight + radius); // Curved top
    vertex(jump, barHeight + radius); // Left straight part
    endShape(CLOSE);
}


if i wanted to curve the vertical chart




Yes, a treemap is a great way to visualize hierarchical data like population, GDP, and other metrics related to countries. Here’s how you could approach it, as well as some suggestions for additional metrics:

1. Basic Hierarchy for Treemap
Root: World (or "All Countries").
Level 1: Countries (each country is a node).
Level 2+: Metrics for each country (such as GDP, population, etc.).
2. Metrics to Visualize
Population: Each country’s rectangle size could be proportional to its population. Larger countries (by population) would have larger rectangles.
GDP: If you want to compare GDP as well, you could use a second level of coloring (e.g., color gradients to represent GDP size, with a color scale from low to high GDP).
Average Income (GDP per capita): This could be used as a third dimension. You could adjust the color intensity or use a different shade to show countries with higher or lower income levels.
3. Multi-Dimensional Treemaps
There are a few ways to encode multiple dimensions into a treemap:

Size & Color Combination:
The size of each country’s rectangle could represent population.
The color of each country could represent GDP or average income (GDP per capita).
Multi-Layered Treemap: You could use a multi-level hierarchical treemap, where:
The first level of the treemap represents countries.
The second level within each country could represent metrics like GDP, population, average income, and any other variable you want to include. This approach could create smaller nested rectangles inside each country’s main rectangle.
4. Example Layout
Root Rectangle (World): Large, encompassing all countries.
USA (Rectangle within the Root): For example, size corresponds to the USA's population. Color might correspond to its GDP.
GDP: A nested rectangle inside the USA’s rectangle, with size representing GDP, and color indicating the average income.
Population: Another nested rectangle for population or potentially included in the area of the initial rectangle.
India: Size for population, color for GDP.
Other countries: All countries have similar metrics represented by size and color, but each will vary based on data.
5. Additional Metrics You Can Use
Here are some more suggestions for metrics that could be visualized in a treemap:

Life Expectancy: Color each country based on life expectancy, showing which countries have a higher or lower life expectancy.
Unemployment Rate: You could use color intensity to reflect the unemployment rate in each country.
Government Debt: A country’s rectangle could be shaded to indicate its level of public debt.
Urbanization Rate: You could use a color gradient to show how urbanized each country is, representing the percentage of the population living in cities.
Education Index or Literacy Rate: These could be encoded as colors within each country’s rectangle.
Carbon Emissions: If you are looking at environmental data, the color could represent the amount of carbon emissions a country produces.
6. Displaying Multiple Metrics
If you want to display multiple metrics clearly, here are a couple of methods:

Size and Color Encoding: As mentioned, you could use size for one metric (e.g., population) and color for another (e.g., GDP or income).
Nested Treemaps: You could create a treemap where countries are broken down into smaller rectangles showing different metrics. For example, within each country’s rectangle, you could have a small section showing the population and a different section showing GDP.
Interactive Treemap: For an interactive display (such as in a dashboard or web visualization), you could hover over or click on each country to display its additional metrics. This would allow users to focus on one metric at a time while still being able to explore other dimensions.
7. Example with Population and GDP
World Treemap: The total area represents the total world population or GDP (depending on what you choose as the root).
USA Rectangle: The size of the rectangle for the USA would be proportional to its population, and its color could represent its GDP (with a color gradient where dark blue might represent high GDP and light blue represents low GDP).
India Rectangle: Similarly, India’s rectangle would be proportional to its population size, but it could have a different color to represent India’s GDP, indicating a different economic profile compared to the USA.
To summarize:
Yes, you can definitely use a treemap to display the population of countries, GDP, and additional metrics like average income, life expectancy, or carbon emissions. The treemap’s effectiveness depends on how you design it, using size, color, and possibly nested layers to represent multiple dimensions of the data. This approach provides a clear, visually appealing way to compare countries based on these metrics.

Would you like to see an example of how this might look in a specific case (e.g., a visualization of population vs. GDP for a few countries)?








Total Area Calculation: The total area for the treemap can be the area of the root rectangle. For example, if you’re starting with a canvas size of 500x500 pixels, the area of the root rectangle is:

totalArea = width × height = 500 × 500 = 250,000 pixels
totalArea=width×height=500×500=250,000 pixels


Proportional Area for Each Country: The size of each rectangle (for a country) is determined by the value associated with that country (e.g., population, GDP). Suppose each country has a value (like population), and you want to calculate the area of its corresponding rectangle. The formula to calculate the area of a country’s rectangle will be:
rectArea= totalValue/countryValue×totalArea



Aspect Ratio Considerations (for Squarified Treemap): If you're implementing a squarified treemap, you need to consider the aspect ratio of each rectangle. The goal is to keep the aspect ratio (width/height) close to 1.

In this case, you may want to divide the available space for a rectangle into smaller sub-rectangles, while attempting to minimize the aspect ratio difference between them.

When dividing a rectangle for a slice-and-dice treemap, you split it into horizontal or vertical sections. If dividing vertically, the width stays the same, and the height is divided by the proportions of each child’s value:

height of child= totalValue/childValue×totalHeight

If dividing horizontally, the height stays the same, and the width is proportional:

width of child= totalValue/childValue × totalWidth


Recursive Division: The treemap is typically built recursively:

Start with the root rectangle.
Split the root rectangle based on the values of the countries.
For each sub-rectangle (a country), divide it again based on its children (if you have a multi-level hierarchy).
Repeat the process until all data is represented.



    // sliceAndDiceTreemap(data, x, y, w, h, rectangles) {
    //     // Base case: if no data left, just return
    //     if (data.length === 0) return;
      
    //     // If there's only 1 item, fill the entire region
    //     if (data.length === 1) {
    //       rectangles.push({
    //         x, y, w, h,
    //         country: data[0].country,
    //         population: data[0].population
    //       });
    //       return;
    //     }
      
    //     // Calculate the total area (in pixels) of this treemap region
    //     // and total population of the data slice
    //     let totalPop = data.reduce((sum, d) => sum + d.population, 0);
    //     let totalArea = w * h;
    //     // Each "1 population unit" corresponds to this many pixels
    //     let scale = totalArea / totalPop;
      
    //     // We'll build rows from top to bottom
    //     let currentRow = [];
    //     let currentRowSum = 0;
      
    //     let remaining = data.slice(); // Copy so we can pop from it
      
    //     // Start placing rows
    //     let currentY = y;
    //     let remainingHeight = h;
      
    //     while (remaining.length > 0) {
    //       // Start a new row with the first item
    //       currentRow = [remaining.shift()];
    //       currentRowSum = currentRow[0].population;
      
    //       // Keep adding items to the row while it doesn't get "too skinny"
    //       let done = false;
    //       while (!done && remaining.length > 0) {
    //         // Check if adding the next item would make the row aspect ratio worse
    //         let nextItem = remaining[0];
    //         let testRow = currentRow.concat([nextItem]);
    //         let testSum = currentRowSum + nextItem.population;
      
    //         // If the aspect ratio gets worse, stop. Otherwise, add the item to the row.
    //         if (this.worseAspectRatio(currentRow, currentRowSum, testRow, testSum, w, scale)) {
    //           done = true; 
    //         } else {
    //           // Accept the next item
    //           currentRow.push(nextItem);
    //           currentRowSum = testSum;
    //           remaining.shift();
    //         }
    //       }
      
    //       // Now we have our row. Compute the row height:
    //       // rowArea = (currentRowSum * scale) in pixels
    //       // rowHeight = rowArea / total width
    //       let rowArea = currentRowSum * scale;
    //       let rowHeight = rowArea / w;
      
    //       // Place each item in this row
    //       let currentX = x;
    //       for (let item of currentRow) {
    //         let itemArea = item.population * scale;
    //         let itemWidth = itemArea / rowHeight; // width = area / height
      
    //         rectangles.push({
    //           x: currentX,
    //           y: currentY,
    //           w: itemWidth,
    //           h: rowHeight,
    //           country: item.country,
    //           population: item.population
    //         });
      
    //         currentX += itemWidth;
    //       }
      
    //       // Move down for the next row
    //       currentY += rowHeight;
    //       remainingHeight -= rowHeight;
      
    //       // If there's no space left, stop
    //       if (remainingHeight <= 0) break;
    //     }
    // } Single Strip 


    OLD CODE 

     // toggleOrientation() {
    //     // Switch the orientation
    //     this.orientation = this.orientation === "vertical" ? "horizontal" : "vertical";
    //     this.renderBars();  // Re-render after toggling orientation
    // }


    // renderBars() {
    //     const isChecked = document.getElementById("toggleOrientation").checked;
    
    //     // Force the chart to render as horizontal if the checkbox is checked
    //     console.log(`isChecked: ${isChecked}`);
    //     if (isChecked === true) {
    //         this.renderHorizontalBars();
    //         console.log("Rendering horizontal bars");
    //         return;
    //     }
    
    //     // Otherwise, use the default orientation logic
    //     switch (this.orientation) {
    //         case 'vertical':
    //             this.renderVerticalGraph();
    //             break;
    //         case 'horizontal':
    //             this.renderHorizontalBars();
    //             break;
    //         case 'stacked':
    //             this.renderStackedBars();
    //             break;
    //         case 'fullGraph':
    //             this.renderFullGraphBars();
    //             break;
    //         case 'line':
    //             this.renderLineChart();
    //             break;
    //         default:
    //             console.error(`Unknown chart type: ${this.orientation}`);
    //             break;
    //     }
    // }
    
    // renderVerticalBars() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     scale(1, -1);
    //     translate(this.margin, 0);
    //     console.log("Rendering vertical bars");
    //     for (let i = 0; i < this.data.length; i++) {
    //         let jump = (this.barWidth + this.gap) * i;
    //         console.log(`Rendering bar at index ${i} with height: ${this.data[i][this.yValue] * this.scaler}`);
    //         fill(this.barColour);
    //         noStroke();
    //         rect(jump, 0, this.barWidth, this.data[i][this.yValue] * this.scaler, 0, 0, 5, 5);
    //     }
    //     pop();
    // }


    // renderHorizontalBars() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     translate(0, -this.margin);
    //     for (let i = 0; i < this.data.length; i++) {
    //         let jump = (this.barWidth + this.gap) * i;
    //         fill(this.barColour);
    //         noStroke();
    //         let barHeight = this.barWidth;
    //         let barWidth = this.data[i][this.yValue] * this.scaler;
    //         rect(0, -jump - this.margin, barWidth, barHeight, 0, 5, 0, 0);
    //     }
    //     pop();
    // }

    // renderBars() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);

    //     push();
    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         ///////////////////////////Vertical Bar Chart//////////////////////////////////////////////////////////
    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         if (this.orientation === 'vertical') {
    //             scale(1, -1); // Invert the y axis
        
    //             translate(this.margin, 0);
    //             for (let i = 0; i < this.data.length; i++) {
    //                 let jump = (this.barWidth + this.gap) * i;
    //                 fill(this.barColour);
    //                 noStroke();
    //                 // console.log(`Index: ${i}, Female Value: ${this.barWidth}, Scaled Height: ${this.scaler} ${this.maxValue}`);  // Debugging

    //                 rect(jump, 0, this.barWidth, this.data[i][this.yValue] * this.scaler, 0,0,5,5);
    //             }
    //         }

    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         ///////////////////////////Horizontal Bar Chart//////////////////////////////////////////////////////////
    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         else if (this.orientation === 'horizontal') {
    //             translate(0, -this.margin); // Move the chart up by the margin
    //             for (let i = 0; i < this.data.length; i++) {
    //                 let jump = (this.barWidth + this.gap) * i;
    //                 fill(this.barColour);
    //                 noStroke();
    //                 let barHeight = this.barWidth;
    //                 let barWidth = this.data[i][this.yValue] * this.scaler;
    //                 rect(0, -jump - this.margin , barWidth, barHeight, 0, 5, 0, 0);
    //             }
    //         }

    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         ///////////////////////////Stacked Bar Chart //////////////////////////////////////////////////////////
    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         else if (this.orientation === 'stacked') {
    //             push();
    //             noFill();
    //             stroke(this.axisColour);
    //             strokeWeight(this.axisThickness);
    //             line(0, 0, 0, this.chartHeight);  // Y-axis
    //             line(0, 0, this.chartWidth, 0);   // X-axis

    //             translate(this.margin, 0); // Apply margin for bars

    //             for (let i = 0; i < this.data.length; i++) {
    //                 let xPos = (this.barWidth + this.gap) * i;
    //                 let stackedHeight = 0; // Track the cumulative height for stacking
                    
    //                 for (let j = 0; j < this.yValue.length; j++) {
    //                     fill(this.barColour); 
    //                     noStroke();
    //                     push();
    //                     let barHeight = this.data[i][this.yValue[j]] * this.scaler;
                        
    //                     push();
    //                     rect(xPos, stackedHeight, this.barWidth, barHeight, 0, 0, 5, 5);
    //                     stackedHeight += barHeight; // Move up for the next segment
    //                 }
    //                 push();

    //                 pop();
    //             }

    //             pop();

    //         }

    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         ///////////////////////////100% Chart //////////////////////////////////////////////////////////
    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         else if (this.orientation === 'fullGraph') {
    //             scale(1, -1);
    //             translate(this.margin, 0);

    //             let itemPercentage = 0;

    //             for (let i = 0; i < this.data.length; i++) {
    //                 let jump = (this.barWidth + this.gap) * i;
    //                 let firstValue = this.data[i]["Female"];
    //                 let secondValue = this.data[i]["Male"];

    //                 let total = firstValue + secondValue;


    //                 let newScaler = this.scaler/100;
                    
    //                 let malepercent = (secondValue / total) * 100;
    //                 let femalepercent = (firstValue / total) * 100;


    //                 let femaleHeight = femalepercent * this.scaler;
    //                 let maleHeight = malepercent * this.scaler;

    //                 let test = total * this.scaler;


    //                 rect(jump , femaleHeight, this.barWidth, test);


    //                 translate(jump, 0 )

    //                 rect(0 , maleHeight, this.barWidth, test);



    //                 console.log(`Index: , Female Value: ${this.scaler}, newValue:  ${this.maxValue} test ${this.scaler}`);
    //                 console.log(malepercent)  // Debugging
    //                 console.log(maleHeight)  // Debugging
    //                 console.log(femalepercent)  // Debugging
    //                 console.log(femaleHeight)  // Debugging


    //             }
    //         }



    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         /////////////////////////// Line Chart ////////////////////////////////////////////////////////////////
    //         ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //         else if (this.orientation === 'line') {
    //             scale(1, -1);
    //             translate(this.margin,0)

    //             for(let i =0; i < this.data.length; i++) {
    //                 let jump = (this.barWidth + this.gap) * i;
    //                 let jump2 = (this.barWidth + this.gap)*(i+1);

    //                 let firstPoint = this.data[i][this.yValue] * this.scaler;
    //                 let secondPoint = this.data[i+1][this.yValue] * this.scaler;
    //                 stroke(this.barColour);
    //                 line(jump, firstPoint, jump2, secondPoint);
    //                 // console.log(`Index: ${i}, Female Value: ${this.data[i][this.yValue]}, Scaled Height: ${this.scaler} ${this.maxValue}`);  // Debugging

    //             }

    //         }
            

    //         // else if (this.orientation === 'grouped') {
    //         //     scale(1, -1);
    //         //     translate(this.margin, 0);

    //         //     let numCategories = this.yValue.length; // Number of groups (e.g., Male, Female)
    //         //     let totalGroupWidth = this.barWidth * numCategories + (this.gap * (numCategories - 1)); // Total width of one group
    //         //     let colors = ["pink", "blue", "green", "orange"]; 

    //         //     for (let i = 0; i < this.data.length; i++) {
    //         //         let baseX = (totalGroupWidth + this.gap) * i; // Position for each group

    //         //         for (let j = 0; j < numCategories; j++) {
    //         //             let category = this.yValue[j];
    //         //             let value = this.data[i][category] * this.scaler;

    //         //             let barX = baseX + (this.barWidth + this.gap) * j; // Offset bars in a group

    //         //             fill(colors[j % colors.length]); // Cycle through colors
    //         //             noStroke();
    //         //             rect(barX, 0, this.barWidth, value, 5, 5, 0, 0);
    //         //         }
    //         //     }
    //         // } //For class tommorow
    //     pop();
    //     pop();
    //     }


    // renderVerticalAxis() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     noFill();
    //     stroke(this.axisColour);
    //     strokeWeight(this.axisThickness);
    //     line(0, 0, 0, -this.chartHeight);
    //     line(0, 0, this.chartWidth, 0);
    //     pop();
    //     console.log("Rendering vertical axis");
    // }

    // renderAxis() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     noFill();
    //     stroke(this.axisColour);
    //     strokeWeight(this.axisThickness);

    //     if (this.orientation === 'vertical' || this.orientation === 'stacked' || this.orientation === 'line') {
    //         line(0, 0, 0, -this.chartHeight);
    //         line(0, 0, this.chartWidth, 0);
    //     } else if (this.orientation === 'horizontal') {
    //         line(0, 0, 0, -this.chartWidth);
    //         line(0, 0, this.chartHeight, 0);
    //     }
    //     pop();
    // }

    // renderLabels() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     push();
    //     translate(this.margin, 0);
    //     for (let i = 0; i < this.data.length; i++) {
    //         let jump = (this.barWidth + this.gap) * i;

    //         // X-axis labels
    //         // fill(this.axisTextColour);
    //         // textAlign(LEFT, CENTER);
    //         // textSize(10);
    //         push();
    //         if (this.orientation === 'vertical' || this.orientation === 'stacked'|| this.orientation === 'line') {
    //             translate(jump + (this.barWidth / 2), 10);
    //             fill(this.axisTextColour);
    //             textAlign(LEFT, CENTER);
    //             noStroke();

    //             textSize(10);
    //             rotate(45);
    //             text(this.data[i][this.xValue], 0, 0);
    //         } else if (this.orientation === 'horizontal') {
    //             let jump = (this.barWidth + this.gap) * i;
    //             translate(-this.margin -this.gap, -jump - this.margin -this.gap);
    //             fill(this.axisTextColour);
    //             textAlign(RIGHT, CENTER);
    //             noStroke();
    //             textSize(10);
    //             rotate(0);
    //             text(this.data[i][this.xValue], 0, 0);
    //         }
    //         pop();
    //     }
    //     pop();
    //     pop();
    // }

    // renderTicks() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     noFill();

    //     let stepSize = ceil((this.maxValue / this.tickNum) / 50) * 50; // Always use increments of 50 for the y axis

    //     // Changing the look of the y axis.
    //     fill(this.axisTickTextColour);
    //     textAlign(RIGHT, CENTER);
    //     textSize(12); // Size of text on y axis

    //     if(this.orientation === 'vertical' || this.orientation === 'stacked') {
    //         for (let i = 0; i <= this.maxValue; i += stepSize) {
    //             let yPos = -i * this.scaler;

    //             stroke(this.axisTickColor);
    //             strokeWeight(1);
    //             line(0, yPos, -10, yPos);
                
    
    //             // Draw Y-axis numbers making sure they are all rounded to their nearest 10
    //             noStroke();
    //             text(i, -15, yPos); 
    //         }
    //     } else if(this.orientation === 'horizontal') {
    //         let stepSize = ceil((this.maxValue / this.tickNum) / 50) * 50; // Always use increments of 50 for the y axis
    //         for(let i = 0; i <= this.maxValue; i += stepSize) {
    //             let xPos = i * this.scaler;

    //             if (i != 0) {
    //                 stroke(this.axisTickColor);
    //                 strokeWeight(1);
    //                 line(xPos, 0, xPos, this.gap);
    //             }
    
    //             // Draw Y-axis numbers making sure they are all rounded to their nearest 10
    //             noStroke();
    //             text(i, xPos + this.gap, 15); 
    //         }
    //     }

    //     // Looking to display the numbers and the lines on the y axis.
        
    //     pop();
    // }

    // renderTickLines() {
    //     push();
    //     translate(this.chartPosX, this.chartPosY);
    //     noFill();

    //     let stepSize = ceil((this.maxValue / this.tickNum) / 50) * 50; // Number of divisions


    //     if(this.orientation === 'vertical' || this.orientation === 'stacked') {
    //         for (let i = 0; i <= this.maxValue; i += stepSize) {
    //             let yPos = -i * this.scaler;
    //             // Draw grid lines

    //             // If i is not 0 then draw the line
    //             if (i != 0) {
    //                 stroke(this.chartTickLinesColor);
    //                 strokeWeight(1);
    //                 line(0, yPos, this.chartWidth, yPos);
    //             }
    //         }
    //     }else if(this.orientation === 'horizontal') {
    //         for (let i = 0; i <= this.maxValue; i += stepSize) {
    //             let xPos = i * this.scaler;

    //             if (i != 0) {
    //                 stroke(this.chartTickLinesColor);
    //                 strokeWeight(1);
    //                 line(xPos, 0, xPos, -this.chartWidth);
    //             }
    //         }
    //     }
    //     pop();
    // }



    

       
          

        // Calculate the max value considering all selected datasets
        // if (this.orientation === "stacked" || this.orientation === "fullGraph") {
        //     // For stacked or cluster, add up the values from all selected datasets
        //     this.maxValue = ceil(
        //         max(this.data.map(row => {
        //             // Sum values from all datasets in this row (considering `this.yValue` as the array of selected datasets)
        //             let sum = 0;
        //             this.yValue.forEach(dataset => {
        //                 sum += row[dataset] || 0; // Add value for each selected dataset (use 0 if not present)
        //             });
        //             return sum;
        //         })) / 10
        //     ) * 10; // Round up to the nearest multiple of 10
        // } else if (this.orientation === "cluster") {
        //     // Find the max value from all selected datasets
        //     const maxValues = this.yValue.map(yValue => {
        //         return max(this.data.map(row => row[yValue] || 0));
        //     });

        //     this.maxValue = ceil(max(maxValues) / 10) * 10;
        // } else {
        //     // For other chart types (e.g., vertical, line), take the max of the selected Y-value column
        //     this.maxValue = ceil(
        //         max(this.data.map(row => row[this.yValue] || 0)) / 10
        //     ) * 10; // Round up to the nearest multiple of 10
        // }